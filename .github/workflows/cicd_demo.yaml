name: Deploy via ECR to EC2
on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_BACKEND: ballrae-demo         # ECR 리포지토리명

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_BACKEND }}:latest
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_BACKEND }}:git-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # (옵션) hate-filter-api가 같은 레포 하위 폴더에 있다면 켜기
      # - name: Build & push hate-filter-api
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./hate-filter-api
      #     push: true
      #     tags: |
      #       ${{ steps.ecr.outputs.registry }}/${{ env.ECR_HATE }}:latest
      #       ${{ steps.ecr.outputs.registry }}/${{ env.ECR_HATE }}:git-${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: SSH deploy (compose로 필요한 서비스만)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd ~/Back   # compose 있는 디렉토리로 이동 (환경에 맞게 바꿔주세요)

            # 워크플로 env를 원격 셸 변수로 노출
            export ECR_BACKEND="${{ env.ECR_BACKEND }}"
            export ECR_DATABASE="${{ env.ECR_DATABASE }}"
            export ECR_HATE="${{ env.ECR_HATE }}"

            # --- AWS CLI 없으면 설치 (1회만) ---
            if ! command -v aws >/dev/null 2>&1; then
              curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get update -y && sudo apt-get install -y unzip
              unzip -o awscliv2.zip
              sudo ./aws/install
              aws --version
            fi

            # --- ECR 로그인 (비대화형) ---
            REGISTRY="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | sudo docker login --username AWS --password-stdin "$REGISTRY"

            # --- 필요한 서비스만 갱신 (예: backend, db, api) ---
            sudo docker compose pull web db hate-filter-api || true
            # db 이미지는 퍼블릭이면 pull 생략해도 됨

            # db는 먼저 보장해서 올리고
            sudo docker compose up -d "$ECR_DATABASE"

            # 앱 컨테이너들만 재생성 (전부가 아니라 필요한 것만)
            sudo docker compose up -d --force-recreate --no-dep web db hate-filter-api

            # 마이그레이션 & 정적파일
            sudo docker compose exec -T web python manage.py migrate --noinput
            sudo docker compose exec -T web python manage.py collectstatic --noinput

            # 청소
            sudo docker image prune -f