
services:
  db:
    image: postgres:latest
    container_name: ballrae-postgres
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    build: .
    container_name: ballrae-backend
    working_dir: /app
    command: python manage.py runserver 0.0.0.0:8000
    env_file:
      - .env
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db

  celery:
    build: .
    container_name: ballrae-celery
    command: celery -A ballrae_backend worker --loglevel=info
    working_dir: /app
    volumes:
      - .:/app
    depends_on:
      - web
      - redis
    env_file:
      - .env
    restart: always

  redis:
    image: redis:7
    container_name: ballrae-redis
    ports:
      - "6379:6379"
    restart: always


  hate-filter-api:
    build:
      context: ./hate-filter-api
      dockerfile: Dockerfile  # 명시해주는 것이 명확함
    container_name: hate-filter-api
    ports:
      - "8001:8001"
    restart: always
    volumes:
      - ./hate-filter-api/app:/app  

  pli-api:
    build:
      context: ./pli-api
      dockerfile: Dockerfile
    container_name: pli-api
    ports:
      - "8002:8002"
    # restart: always
    volumes:
      - ./pli-api/app:/app   # 코드 수정 핫리로드 용(개발 시 편함)
    
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: ballrae-zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: ballrae-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: ballrae-zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LOG4J_LOGLEVEL: INFO
    depends_on:
      - zookeeper
    volumes:
      - kafka_data:/bitnami/kafka

  kafka-consumer:
    container_name: ballrae-kafka-consumer
    build: .
    command: python -u ballrae_backend/streaming/consumer.py
    depends_on:
      - db
      - kafka
    env_file:
      - .env
    volumes:
      - .:/app
    # # kafka가 실행안되면 broker unavailable뜨니까~
    # restart: on-failure
    working_dir: /app
  
  kafka-producer:
    container_name: ballrae-kafka-producer
    build: .
    command: python -u ballrae_backend/streaming/producer.py
    depends_on:
      - db
      - kafka
    env_file:
      - .env
    volumes:
      - .:/app
    # restart: on-failure
    working_dir: /app
  
  airflow-webserver:
    container_name: ballrae-airflow-webserver
    image: apache/airflow:2.9.1
    restart: always
    depends_on:
      - airflow-scheduler
      - airflow-postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/opt/airflow/dags
    command: webserver

  airflow-scheduler:
    container_name: ballrae-airflow-scheduler
    image: apache/airflow:2.9.1
    restart: always
    depends_on:
      - airflow-postgres
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
    volumes:
      - ./dags:/opt/airflow/dags
    command: scheduler

  airflow-postgres:
    container_name: ballrae-airflow-postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_db:/var/lib/postgresql/data

volumes:
  postgres_data:
  kafka_data:
  zookeeper_data:
  airflow_db:

